// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Module, mixer,
    __slice = [].slice,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  EventEmitter = (function() {

    function EventEmitter() {
      this.events = {};
    }

    EventEmitter.prototype.emit = function() {
      var args, e, listener, _i, _len, _ref;
      e = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!this.events[e]) {
        return false;
      }
      _ref = this.events[e];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        listener = _ref[_i];
        listener.apply(null, args);
      }
      return true;
    };

    EventEmitter.prototype.addListener = function(e, listener) {
      var _base, _ref;
      this.emit('newListener', e, listener);
      ((_ref = (_base = this.events)[e]) != null ? _ref : _base[e] = []).push(listener);
      return this;
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.once = function(e, listener) {
      var fn,
        _this = this;
      fn = function() {
        _this.removeListener(e, fn);
        return listener.apply(null, arguments);
      };
      this.on(e, fn);
      return this;
    };

    EventEmitter.prototype.removeListener = function(e, listener) {
      var l;
      if (!this.events[e]) {
        return this;
      }
      this.events[e] = (function() {
        var _i, _len, _ref, _results;
        _ref = this.events[e];
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          l = _ref[_i];
          if (l !== listener) {
            _results.push(l);
          }
        }
        return _results;
      }).call(this);
      return this;
    };

    EventEmitter.prototype.removeAllListeners = function(e) {
      if (e != null) {
        delete this.events[e];
      } else {
        this.events = {};
      }
      return this;
    };

    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;

    EventEmitter.prototype.offAll = EventEmitter.prototype.removeAllListeners;

    return EventEmitter;

  })();

  Module = (function(_super) {

    __extends(Module, _super);

    function Module(o) {
      Module.__super__.constructor.apply(this, arguments);
      this._ = {
        props: {}
      };
      if (o != null) {
        this.set(o);
      }
    }

    Module.prototype.extend = function(o) {
      return mixer.extend(this, o);
    };

    Module.prototype.get = function(k) {
      return this._.props[k];
    };

    Module.prototype.getAll = function() {
      return this._.props;
    };

    Module.prototype.set = function(k, v, silent) {
      var ky;
      if (typeof k === 'object') {
        for (ky in k) {
          v = k[ky];
          this.set(ky, v);
        }
        return this;
      } else {
        this._.props[k] = v;
        if (!silent) {
          this.emit("change", k, v);
          this.emit("change:" + k, v);
        }
        return this;
      }
    };

    Module.prototype.has = function(k) {
      return this._.props[k] != null;
    };

    Module.prototype.remove = function(k, silent) {
      delete this._.props[k];
      if (!silent) {
        this.emit("change", k);
        this.emit("change:" + k);
        this.emit("remove", k);
        this.emit("remove:" + k);
      }
      return this;
    };

    Module.prototype.emit = function() {
      var d, e, l, _i, _len, _ref;
      e = arguments[0], d = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      Module.__super__.emit.apply(this, arguments);
      _ref = mixer._listeners;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        l = _ref[_i];
        l.emit.apply(l, [e, this].concat(__slice.call(d)));
      }
      return this;
    };

    return Module;

  })(EventEmitter);

  Module.create = function() {
    return (function(func, args, ctor) {
      ctor.prototype = func.prototype;
      var child = new ctor, result = func.apply(child, args);
      return Object(result) === result ? result : child;
    })(this, arguments, function(){});
  };

  mixer = {
    _listeners: [],
    module: Module,
    emitter: EventEmitter,
    listen: function(emitter) {
      return mixer._listeners.push(emitter);
    },
    create: function() {
      return Module.create.apply(Module, arguments);
    },
    extend: function(o, n) {
      var k, v;
      for (k in n) {
        v = n[k];
        o[k] = v;
      }
      return o;
    }
  };

  mixer.extend(mixer, new EventEmitter);

  mixer.listen(mixer);

  if (typeof module !== "undefined" && module !== null) {
    module.exports = mixer;
  } else {
    window.mixer = mixer;
  }

}).call(this);
