// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Module, extend, mixer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __slice = [].slice;

  if (typeof process !== "undefined" && process !== null) {
    EventEmitter = require('events').EventEmitter;
  } else {
    EventEmitter = require('emitter');
  }

  extend = function(o, n) {
    var k, v;
    for (k in n) {
      if (!__hasProp.call(n, k)) continue;
      v = n[k];
      o[k] = v;
    }
    return o;
  };

  Module = (function(_super) {

    __extends(Module, _super);

    function Module(o) {
      Module.__super__.constructor.call(this);
      this._ = {
        props: {}
      };
      extend(this, o);
    }

    Module.prototype.get = function(k) {
      return this._.props[k];
    };

    Module.prototype.getAll = function() {
      return this._.props;
    };

    Module.prototype.set = function(k, v, silent) {
      var ky;
      if (k == null) {
        return;
      }
      if (typeof k === 'object') {
        for (ky in k) {
          v = k[ky];
          this.set(ky, v);
        }
        return this;
      } else {
        if (v == null) {
          return;
        }
        this._.props[k] = v;
        if (!silent) {
          this.emit("change", k, v);
          this.emit("change:" + k, v);
        }
        return this;
      }
    };

    Module.prototype.has = function(k) {
      return this._.props[k] != null;
    };

    Module.prototype.remove = function(k, silent) {
      delete this._.props[k];
      if (!silent) {
        this.emit("change", k);
        this.emit("change:" + k);
        this.emit("remove", k);
        this.emit("remove:" + k);
      }
      return this;
    };

    return Module;

  })(EventEmitter);

  mixer = {
    Module: Module,
    Emitter: EventEmitter,
    extend: extend,
    module: function() {
      var a;
      a = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return {
        create: function(o) {
          var mod;
          mod = (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(Module, a, function(){});
          mod.set(o);
          return mod;
        },
        subclass: function(b) {
          return mixer.module.apply(mixer, a.concat(b));
        }
      };
    }
  };

  module.exports = mixer;

}).call(this);
