// Generated by CoffeeScript 1.4.0
(function() {
  var EventEmitter, Module, mixer,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (typeof process !== "undefined" && process !== null) {
    EventEmitter = require('events').EventEmitter;
  } else {
    EventEmitter = require('emitter');
  }

  Module = (function(_super) {

    __extends(Module, _super);

    function Module(o) {
      this._ = {
        props: {}
      };
      if (o != null) {
        this.set(o);
      }
    }

    Module.prototype.get = function(k) {
      return this._.props[k];
    };

    Module.prototype.getAll = function() {
      return this._.props;
    };

    Module.prototype.set = function(k, v, silent) {
      var ky;
      if (k == null) {
        return;
      }
      if (typeof k === 'object') {
        for (ky in k) {
          v = k[ky];
          this.set(ky, v);
        }
        return this;
      } else {
        this._.props[k] = v;
        if (!silent) {
          this.emit("change", k, v);
          this.emit("change:" + k, v);
        }
        return this;
      }
    };

    Module.prototype.clear = function() {
      var k, v, _ref, _results;
      _ref = this._props;
      _results = [];
      for (k in _ref) {
        v = _ref[k];
        _results.push(this.set(k, void 0));
      }
      return _results;
    };

    Module.prototype.has = function(k) {
      return this._.props[k] != null;
    };

    Module.prototype.remove = function(k, silent) {
      delete this._.props[k];
      if (!silent) {
        this.emit("change", k);
        this.emit("change:" + k);
        this.emit("remove", k);
        this.emit("remove:" + k);
      }
      return this;
    };

    Module.prototype.toJSON = function() {
      return this._.props;
    };

    return Module;

  })(EventEmitter);

  mixer = {
    Module: Module,
    Emitter: EventEmitter
  };

  module.exports = mixer;

}).call(this);
